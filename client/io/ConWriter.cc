/*
** This file is part of eOn.
**
** SPDX-License-Identifier: BSD-3-Clause
**
** Copyright (c) 2010--present, eOn Development Team
** All rights reserved.
**
** Repo:
** https://github.com/TheochemUI/eOn
*/

#include "client/io/ConWriter.hpp"
#include "Element.hpp"
#include "client/IOHelpers.hpp"
#include <iostream>

namespace eonc::io {

bool ConWriter::writeImpl(const Matter &mat, std::ofstream &fout) {
  // TODO(rg) :: These should be lambda applied sometime
  // if (mat.usePeriodicBoundaries) {
  //     mat.applyPeriodicBoundary();
  // }

  const std::vector<std::string> preHeader{"Generated by eOn\n", "\n"};
  const std::vector<std::string> postHeader{"\n", "\n"};
  const size_t numAtoms = mat.numberOfAtoms();
  if (numAtoms == 0) {
    return false;
  }

  const auto uniq_masses = getUniqueValues(mat.getMasses());
  const auto uqc_atmnrs = getUniqueCounts(mat.getAtomicNrs());
  const size_t numComponents = uniq_masses.size();

  // Initialize component start indices
  std::vector<size_t> componentStartIndices;
  // Reserve enough space
  componentStartIndices.reserve(numComponents + 1);
  componentStartIndices.push_back(0);

  for (size_t idx = 1; idx < numAtoms; ++idx) {
    if (mat.getAtomicNr(idx) != mat.getAtomicNr(idx - 1)) {
      componentStartIndices.push_back(idx);
    }
  }
  componentStartIndices.push_back(numAtoms);

  fout << fmt::format("{}", fmt::join(preHeader, ""));

  Eigen::Vector3d lengths = mat.cell.rowwise().norm();
  fout << fmt::format("{:.6f}\n", fmt::join(lengths, " "));

  Eigen::Vector3d angles;
  angles(0) = std::acos(mat.cell.row(0).dot(mat.cell.row(1)) /
                        (lengths(0) * lengths(1))) *
              180 / M_PI;
  angles(1) = std::acos(mat.cell.row(0).dot(mat.cell.row(2)) /
                        (lengths(0) * lengths(2))) *
              180 / M_PI;
  angles(2) = std::acos(mat.cell.row(1).dot(mat.cell.row(2)) /
                        (lengths(1) * lengths(2))) *
              180 / M_PI;

  fout << fmt::format("{:.6f}\n", fmt::join(angles, " "));

  fout << fmt::format("{}", fmt::join(postHeader, ""));

  fout << numComponents << "\n";
  fout << fmt::format("{}\n", fmt::join(uqc_atmnrs, " "));
  fout << fmt::format("{:.6f}\n", fmt::join(uniq_masses, " "));

  for (size_t j = 0; j < numComponents; ++j) {
    fout << mass2atom(uniq_masses[j]) << "\n";
    fout << fmt::format("Coordinates of component{:4}\n", j + 1);
    for (size_t i = componentStartIndices[j]; i < componentStartIndices[j + 1];
         ++i) {
      fout << fmt::format("{:.6f} {:.6f} {:.6f} {} {}", mat.getPosition(i, 0),
                          mat.getPosition(i, 1), mat.getPosition(i, 2),
                          mat.getFixed(i), i + 1);
      if (j < numComponents - 1) {
        fout << "\n";
      }
    }
  }

  return true;
}

} // namespace eonc::io
