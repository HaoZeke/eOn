/*
** This file is part of eOn.
**
** SPDX-License-Identifier: BSD-3-Clause
**
** Copyright (c) 2010--present, eOn Development Team
** All rights reserved.
**
** Repo:
** https://github.com/TheochemUI/eOn
*/

#include "client/io/XYZWriter.hpp"
#include "Element.hpp"
#include <iostream>

namespace eonc::io {

/**
 * @brief Writes the Matter object to an .xyz file.
 *
 * This function writes the details of the Matter object, such as atomic
 * positions and atomic types, to an .xyz file.
 *
 * @param mat The Matter object containing atomic data.
 * @param fout The output file stream where the data will be written.
 * @return True if the file is written successfully, false otherwise.
 *
 * @note The function assumes that atoms are grouped by their atomic numbers.
 *       If the Matter object is empty (i.e., contains no atoms), the function
 *       returns false.
 */
bool XYZWriter::writeImpl(const Matter &mat, std::ofstream &fout) {
  // TODO(rg) :: These should be lambda applied sometime
  // if (mat.usePeriodicBoundaries) {
  //     mat.applyPeriodicBoundary();
  // }

  // Headers to be written at the beginning of the file
  const std::vector<std::string> preHeader{"Generated by eOn\n"};
  const size_t numAtoms = mat.numberOfAtoms();
  // Early return for empty objects
  if (numAtoms == 0) {
    return false;
  }

  // Write the number of atoms
  fout << numAtoms << "\n";
  // Write a comment line
  fout << "XYZ file generated by eOn\n";

  // Write atomic symbols and coordinates for each atom
  for (size_t i = 0; i < numAtoms; ++i) {
    fout << fmt::format("{} {:.6f} {:.6f} {:.6f}\n", mass2atom(mat.getMass(i)),
                        mat.getPosition(i, 0), mat.getPosition(i, 1),
                        mat.getPosition(i, 2));
  }

  return true;
}

} // namespace eonc::io
